= Днeс

* Абстракции: обобщен поглед над познатите колекции
* List comprehension
* Деструктуриране
* Persistent опашка
* Reader

= Какво знаем до тук за колекциите?
:annotate
  ; списък
  '(x y :z 7)

  ; вектор
  ['x 'y :z 7]

  ; мап
  {:name "Ivo" :gender :male}

  ; множество
  #{1 2 3}

  ; множество от мапове
  #{{:name "Ivo" :gender :male}
    {:name "Mira" :gender :female}
    {:name "Hristo" :gender :male}
    {:name "Iordan" :gender :male}}

  ; различно е от функцията мап
    (map str [1 2 3 4 5])                 ; =>

= Колекциите са хетерогенни, immutable и persistent

* Споделя се памет между две версии на една структура
* Новата структура заделя памет само за промените от старата
* Досещате се, че са [реализирани](http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf) с дървета
* Ще построим подобно дърво нататък в курса

= Полиморфизъм над колекции
== имплементират интерфейса clojure.lang.IPersistentCollection

`conj` - добавя елемент към колекция по възможно най-ефективния начин и запазва типа ѝ
:annotate
  (conj '(1 2 3) 4)                          ; =>
  (conj [1 2 3] 4)                           ; =>
  (conj [] 1 2 3)                            ; =>

`seq` - връща елементите на колекцията в абстрактна последователност
`count` - връща бройката елементи в колекцията
`empty` - връща празна инстанция от типа на колекцията

:annotate
  (empty  #{:a :b :c})                       ; =>
  (empty [1 2 3])                            ; =>
  (class (empty '(1 2 3)))                   ; =>
  (class (empty  #{:a :b :c}))               ; =>

= Сравняване на колекции
== Всички колекции могат да се сравняват помежду си

Различните видове последователности са равни когато имат еднакви елементи в същата подредба
:annotate
  (= [1 2 3] '(1 2 3))                       ; =>
  (= [1 2 3] '(2 1 3))                       ; =>
  (= [] '())                                 ; =>
  (= [1 2 3] '(1 2))                         ; =>

Маповете могат да бъдат равни само на други мапове
:annotate
  (= {{:1 :а} {:2 :b}} {{:2 :b} {:1 :а}})    ; =>
  (= {:3 :c} {:c :3})                        ; =>
  (= {} '())                                 ; =>

Множествата могат да бъдат равни само на други множества
:annotate
  (= #{:a :b :c} #{:b :c :a})                ; =>
  (= {} #{})                                 ; =>
  (= #{:a :b :c} [:a :b :c])                 ; =>

= Последователности
== имплементират интерфейса clojure.lang.Seqable

Как се създават последователности
:annotate
  (seq (range 0 20 3))          ; =>
  (seq "Example")               ; =>
  (seq {:a 5 :b 6})             ; =>
  (seq [])                      ; =>
  (seq nil)                     ; =>

  (cons 0 '(1 2 3 4 5))         ; =>
  (cons 0 [1 2 3 4 5])          ; =>

  (list* 0 1 2 (range 3 6))     ; =>

  ;Внимавайте - list* не връща винаги списък
  (class (cons 0 (cons 1 nil))) ; =>
  (class (list* 0 1 [2]))       ; =>

  (list? (list* 0 (range 1 6))) ; =>

= Операции върху последователности

Можете да вземате елементите според позицията им
:annotate
  (first ['x 'y 'z])            ; =>
  (rest ['x 'y 'z])             ; =>
  (next ['x 'y 'z])             ; =>

  (rest ['x])                   ; =>
  (next ['x])                   ; =>

Колекциите и техните съставни части са винаги immutable.

= Асоциативни колекции
== съпоставя се ключ на стойност

`assoc` - прави асоциация между ключ и стойност
`dissoc` - премахва асоциацията между ключ и стойност
`get` - взема стойността отговаряща на ключ
`contains?` - предикат, който проверява дали даден ключ има асоциирана стойност

:annotate
  (def ico {:name "Hristo"
            :age 22
            :gender :male})
  ico                               ; =>
  (get ico :phone)                  ; =>
  (assoc ico :nationality :BG)      ; =>
  (dissoc ico :age)                 ; =>

  (def ico ["Hristo" 22 :male])     ; =>
  (get ico 6)                       ; =>
  (assoc ico 3 :BG)                 ; =>
  ; няма dissoc за вектори

  (contains? ico 3)                 ; =>
  (contains? [1 2 3] 0)             ; =>

= Индексирани колекции

Асоциативни колекции, където индексите са ключове.
:annotate
  (def team [:mira :ivo :hristo :dakata]) ; =>
  (nth team 3)                            ; =>
  (get team 3)                            ; =>

  (get team 9)                            ; =>

  (get :hristo 2)                         ; =>

:code
  (nth :hristo 2)                        ; UnsupportedOperationException
  (nth team 9)                           ; java.lang.IndexOutOfBoundsException

= Kолекциите могат да се ползват като функции

:annotate
  ([:ico :ivo :dakata] 2)                 ; =>
  ({:name "Hristo" :age 22} :name)        ; =>

Keyword-ите също могат да са функции
:annotate
  (:name {:name "Hristo" :age 22})        ; =>

Koй начин на достъп да ползваме и кога?
+ Използвайте `keyword`-а като функция (консистентно с records)
+ Използвайте колекцията като функция
+ Използвайте `get` когато не знаете каква колекция обработвате
+ Използвайте `nth` когато искате да получите exception за некоректен достъп

= Стекове

`conj` - преизползваме добавянето на елементи към колекция
`pop` - премахва стойността на върха на стека
`peek` - връща стойността на върха на стека

Макар че добавят в различен ред и векторите и списъците в Clojure са стекови колекции
:annotate
  (def pills (conj '() :red :blue :green)) ; =>
  (peek pills)                             ; =>
  (conj pills :pink)                       ; =>
  (pop pills)                              ; =>

Как бихте реализирали хетерогенна, immutable, persistent опашка?

= List comprehension
== Конструкция, която позволява лесно създаване на нова колекция от съществуваща

Специалната форма (for seq-exprs body-expr)
:annotate
  (for [x [0 1 2 3 4 5]] (* 2 x))  ; =>

  ; Забележете реда на резултатната колекция
  (def coll
    (for [x [0 1 2 3]
          y '(0 1 2 3)]
         (* x y)))
  coll                             ; =>

  ; Забележете реда на резултатната колекция
  (def coll
    (for [x (range 2)
          y (range 2)
          z (range 2)]
       [x y z]))
  coll                             ; =>

= List comprehension
:annotate
  ; Можем да използваме конструкция let
  (def coll
    (for [x (range 1 6)
          :let [y (+ x 3)
                z (- x 3)]]
         [x y z]))
  coll                             ; =>

  ; Можете да филтрирате резултати
  (def coll (for [x [0 1 2 3 4 5]
                  :when (even? x)]
              (* 3 x)))
  coll                             ; =>

  ;Можете да филтрирате и по сметнатите в let изрази
  (def coll (for [x [0 1 2 3 4 5]
                  :let [y (* x 3)]
                  :when (even? y)]
              y))
  coll                             ; =>

= List comprehension
== while
:annotate

  ; Ползване на :when
  (def coll (for [x (range 3) y (range 3)
                  :when (not= y 0)]
              [x y]))
  coll                             ; =>

  ; Ползване на :while
  (def coll (for [x (range 3) y (range 3)
                  :while (not= y 0)]
              [x y]))
  coll                             ; =>

= List comprehension
== за напреднали
:annotate
  (def pythagorean
    (for [z (range 26)
          y (range 26)
          :while (< y z)
          x (range 26)
          :while (< x y)
          :let [xx (* x x)
                yy (* y y)
                zz (* z z)]
          :when (= (+ xx yy) zz)]
      [x y z]))

  pythagorean ; =>

= doseq

Изпълнява функции за резултатните стойности заради странични ефекти (връща `nil`)
:annotate
  (doseq [x [1 2 3] y [1 2 3]] (prn (* x y)))
  ; 1 2 3 2 4 6 3 6 9

  (doseq [x (range 3) y (range 3) :when (not= y 0)] (prn (* x y)))
  ; 0 0 1 2 2 4

  (doseq [x (range 10) :let [y (+ x 3)] :when (= 0 (mod y 3))] (prn [x y]))
  ; [0 3] [3 6] [6 9] [9 12]

Когато искате да създадете колекция - изпозлвайте `for`
Когато искате да логвате резултати - използайте `doseq`

= Деструктуриране на аргументи

Подадените аргументи се разделят, така че да съвпаднат с шаблона за деструктуриране.
За всяка част се създава локална дефиниция по дадения шаблон.
:annotate
  ; деструктуриране на последователности
  (defn destruct [[a b c d]]
    (prn b)
    (prn d)
    (+ b d))
  ; a - е първия елемент от подадената колекция, b - на втория и т.н.
  (destruct (range 10))
  ; =>

  ; деструктуриране на мапове
  (defn log-user [{name :name age :age }]
    (println name " is " age " years old."))
  (log-user {:name "Ivo" :gender :male :age 22})
  ; Ivo is 22 years old.

  (for [[x y] '([:a 1] [:b 2] [:c 0]) :when (= y 0)] x)
  ; =>

  (doseq [[key value] {:1 'a :2 'b :3 'c}] (prn key value))
  ; :1 a :3 c :2 b
Множествата не се деструктурират.

= Деструктуриране на аргументи
== за напреднали

Имаме по-кратък синтаксис за група от keyword ключове:
:annotate
  (defn log-user [{:keys [name gender age]}] (println name "is" age "years old."))
  (log-user {:name "Ivo" :gender :male :age 22})
  ; Ivo is 22 years old.

Можем да даваме и стойности по подразбиране:
:annotate
  (defn log-user [{:keys [name gender age]
                   :or {name "Anonymous", gender :male, age 15}}]
    (println name "is" age "years old."))
  (log-user {:name "Monkata"})
  ; Monkata is 15 years old.

Можете да пропуснете аргумент, когато стойността му няма значение за функцията:
:code
  (defn log-user [{:keys [name _ age]}]
    (println name " is " age " years old."))

  (defn destruct [[_ b _ d]] (prn b) (prn d) (+ b d))

= Деструктуриране на аргументи
== за напреднали

Ако ключовете не са `keyword`-и, а низове:

:annotate
  (defn user-info [{:strs [name age location]}]
    (format "%s is %s years old and lives in %s." name age location))

  (user-info {"name" "Stefan" "age" 28 "location" "Sofia"})
  ; =>

или символи:
:annotate
  (defn user-info [{:syms [name age location]}]
    (format "%s is %s years old and lives in %s." name age location))

  (user-info {'name "Bill" 'age 42 'location "Massachusetts"})
  ; =>

= Деструктуриране на аргументи
== за напреднали

Можете да запазите и целия аргумент, преди да е деструктуриран:
:code
  (defn destruct [[a b c :as origin]]
    (println "The collection" origin "starts with" a b c "."))

Можете да имаме и призволен брой аргументи:
:annotate
  (defn destruct [[a b c d & more]] (prn b) (prn d) (prn more))
  (destruct (range 10))
  ; 1 3 (4 5 6 7 8 9)

  ; проверява дали даден елемент е част от колекция - различно от contains?
  (defn has? [[h & more] item]
    (and
      (not= h nil)
      (or
        (= h item)
        (has? more item))))

= Деструктуриране на аргументи
== за напреднали

Дефиниция на факториел по още един начин - забележете деструктурирането h & t

:code
  (defn fact [n]
    (let [nums (range 1 (inc n)),
          multiply (fn self [[h & t] result]
                       (cond
                         (= h nil) result
                         :else (self t (* h result))))]
      (multiply nums 1)))

= Деструктуриране на аргументи
== за напреднали

Нека имаме:
:code
  (def user-info ["skanev" :name "Stefan" :city "Sofia"])

Можем да деструктурираме по следния начин:
:code
  (let [[username & extra-info] user-info
        {:keys [name city]} (apply hash-map extra-info)]
    (format "%s is in %s" name city))
  ; "Stefan is in Sofia"

Но имаме и по-елегантен начин:

:code
  (let [[username & {:keys [name city]}] user-info]
    (format "%s is in %s" name city))
  ; "Stefan is in Sofia"

* Третираме `& more` последователността като нещо асоциативно
* Елементите ѝ образуват `ключ-стойност` двойки
* Трябва да са четен брой

= `keyword` аргументи

:annotate
  (defn order
    [drink & {:keys [size syrup]
              :or {size "grande"
                   syrup "hazelnut"}}]
    (format "You ordered a %s %s with a %s syrup" drink size syrup))

  (order "Latte")                                      ; =>
  (order "Latte" :syrup "caramel")                     ; =>
  (order "Espresso" :syrup "Peppermint" :size "venti") ; =>
  (order "Espresso" 42 43)                             ; =>

* Аналогично с това, което видяхме на предния слайд
* Имаме само един задължителен аргумент
* Всичко останало ще се третира като двойки `ключ-стойност`
* Сложили сме и стойности по подразбиране
* Ще хванем само ключови думи, защото сме използвали `:keys`

= Опашка

В Clojure има реализирана опашка - `clojure.lang.PersistentQueue`

Наивно решение (1):
:annotate
  (defn make-queue [] [])
  (defn push-to-queue [q x] (conj q x))
  (defn peek-at-queue [q] (first q))
  (defn pop-from-queue [q] (vec (rest q)))
  (defn empty-queue? [q] (empty? q))

- неоптимално откъм време и памет

Наивно решение (2):
:annotate
  (defn make-queue [] [])
  (defn empty-queue? [q] (empty? q))
  (defn push-to-queue [q x] (conj q x))
  (defn peek-at-queue [q] (first q))
  (defn pop-from-queue [q] (if (empty-queue? q) [] (subvec q 1)))

- `subvec` връща подвектор, който пази референция към оригиналния вектор
- векторът никога не намалява

= Ефективна имплементация
== Два вектора

:annotate
  (defn make-queue
    []
    {:front nil :back []})

  (defn push-to-queue
    [{:keys [front back]} item]
    {:front front :back (conj back item)})

  (defn peek-at-queue
    [{:keys [front back]}]
    (first (or front back)))

  (defn pop-from-queue
    [{:keys [front back]}]
    (if (seq front)
      {:front (next front) :back back}
      {:front (next back) :back []}))

  (defn empty-queue?
    [{:keys [front back]}]
    (and (empty? front) (empty? back)))

= Ефективна имплементация
== Два вектора (2)

* Относително константни операции
* Добавянето на елемент е константно
* Вземането на елемент - също
* Както и местенето от `:back` към `:front`
* Но целия `front` се пази, което може да е проблем откъм памет

= Ефективна имплементация
== Вектор и списък

:annotate
  (defn make-queue
    []
    {:front nil :back []})

  (defn push-to-queue
    [{:keys [front back]} item]
    {:front front :back (conj back item)})

  (defn peek-at-queue
    [{:keys [front back]}]
    (first (or front back)))

  (defn pop-from-queue
    [{:keys [front back]}]
    (if (seq front)
      {:front (next front) :back back}
      {:front (next (apply list back)) :back []}))

  (defn empty-queue?
    [{:keys [front back]}]
    (and (empty? front) (empty? back)))

= Ефективна имплементация
== Вектор и списък (2)

* Малко по-бавно поради прехвърлянето от вектор към списък
* По-ефективно откъм памет

= Reader

Основна съставна част от компилатора. Чете текст и ни връща Clojure структури. Работи и в обратната посока.

Можете да ползвате `read-string` за да десериализирате Clojure код:
:annotate
  (read-string "(+ 2 2)")         ; =>
  (read-string "'(1 2 3)")        ; =>

Можете да ползвате `pr`, `prn` и `pr-str` за да сериализирате Clojure код:
:annotate
  (prn (+ 2 2))                   ; =>
  (pr-str '(1 2 3))               ; =>

  (read-string (pr-str '(1 2 3))) ; =>
Можете да ползвате `eval`, за да оцените прочетен така израз:
:annotate
  (eval (read-string "(+ 2 2)"))  ; =>
  (eval "(+ 2 2)")                ; =>
