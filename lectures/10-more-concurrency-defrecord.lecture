= Днес

* Разни други конкуретни неща: `pmap` и `promise`
* Особености на STM: write skew, barging, min- и max-history
* defrecord

= promisе
== Ненанапразни обещания

* `promise` е интересен начин за синхронизация
* Подобно на `future`, `deref` блокира докато `promise`-а не получи стойност
* Последното може да стане с `(deliver promise value)`

= promise

:code
  (def the-promise (promise))
  (def background (agent nil))

  (send background (fn [_] (Thread/sleep 100)))
  (send background (fn [_] (println "About to deliver the promise")))
  (send background (fn [_] (deliver the-promise 42)))
  (send background (fn [_] (println "Delivered the promise a while ago")))

  (println "About to read the promise")
  (println @the-promise)

= promise
== Асинхронни функции

* Примерна употреба на `promise`: асинхронни функции
* Това са функции, които приемат функция, която да извикат когато резултата е готов
* Някой каза ли node.js?
* Това е реминисцентно на continuation passing style, но незадължително, когато callback-а се извиква в друга нишка
* Например: `(future-add 2 3 #(printf "The result is %s\n" %))`
* Цел: да превърнем функцията в синхронна (да връща резултат веднага)
* Начин: създаваме promise и подаваме callback, който deliver-ва promise-а

= promise
== Асинхронни функции (2)

:code
  (defn future-addition
    [arg1 arg2 callback-fn]
    (future (callback-fn (+ arg1 arg2))))

  (future-addition 2 3
    (fn [n]
      (printf "Async result: %s\n" n)))

= promise
== Асинхронни функции (3)

:annotate
  (defn future-addition
    [arg1 arg2 callback-fn]
    (future (callback-fn (+ arg1 arg2))))

  (defn sync-fn
    [async-fn]
    (fn [& args]
      (let [result (promise)]
        (apply async-fn (conj (vec args) #(deliver result %)))
        @result)))

  ((sync-fn future-addition) 2 3) ; =>

= pmap

* Паралелен map
* Просто пишете едно p отпред
* Има смисъл, когато операцията отнема съществено повече време от нужното за синхронизация
* Пример в [gh:fmi/clojure-examples]
* Има аналогични `pcalls` и `pvalues`

= pcalls

Извиква няколко функции на нула аргумента паралелно и връща резултатите им като seq.

:annotate
  (def something
    (pcalls #(inc 10)
            #(* 6 9)
            #(name :foo/bar)))

  something ; =>

= pvalues

Същото като предишното, ама макрос - не подаваме функции, а просто изрази.

:annotate
  (def something
    (pvalues (inc 10)
             (* 6 9)
             (name :foo/bar)))

  something ; =>

Трите израза се оценяват едновременно.

= Ref
== Семантика, припомняне

* Референтен тип `(ref initial-value)`
* Достъпа става в транзакция, която се отваря с `dosync`
* Всички четения виждат състоянието на `ref`-овете от началото на транзакцията (snapshot isolation)
* Промяна на стойност става с `alter`, `commute` или `ref-set`, четенето става с `deref`
* Ако друга транзакция е променила `alter`-нат `ref`, транзакцията се `retry`-ва
* Аналогично за `ref-set`
* Ако се променя с `commute`, операцията се прилага два пъти - веднъж в транзакцията и веднъж накрая, ако е успешна
* Ако `commute`-нат `ref` е бил променен с `commute` от друга транзакция, не се налага `retry`
* `deref` не кара други транзакции да retry-ват

= Двете сметки
== Ситуацията

Представете си следната ситуация:

* Христо има две сметки в банка, всяка по 100 лева
* Може да тегли колкото пари иска, стига общия баланс на всички сметки да е неотрицателен
* В горния пример, може да изтегли 200 лева

= Двете сметки
== Кодът

Ето го кода:

:code
  (def account-1 (ref 100))
  (def account-2 (ref 100))

  (defn withdraw
    [account amount]
    (dosync
      (when (>= (+ @account-1 @account-2) amount)
        (alter account - amount))))

Какво ще стане, когато конкурентно опита да изтегли 200 лева от двете сметки?

= Двете сметки
== Проблемът

* `deref` не кара други транзакции да retry-ват
* Транзакцията вижда консистентни стойности, които могат да бъдат стари на края на транзакцията (ако тя не ги променя)
* Съответно, една транзакция може да е направила сметка със стара стойност
* Това се нарича [write skew](http://en.wikipedia.org/wiki/Snapshot_isolation)
* Държим да подчертаем, това може да стане само когато транзакцията чете, но не пише в даден ref
* Този проблем нямаше да го има, ако `deref` можеше да кара други транзакции да retry-ват
* `ensure` прави точно това

= Write skew
== ensure

:code
  (defn safe-withdraw
    [account amount]
    (dosync
      (when (>= (+ (ensure account-1) (ensure account-2)) amount)
        (Thread/sleep 100)
        (alter account - amount))))

= Barging

* Механизъм, с който изпълняваща се транзакция кара друга, с която има конфликт, да retry-не
* За да може една транзакция на barge-не друга, трябва да са изпълнени три условия:
* Първо, транзакцията да се е изпълнявала повече от 1/100 секунда
* Второ, транзакцията да е започнала преди другата
* Трето, другата транзакция все още да се изпълнява (а не да commit-ва)
* По този начин по-бавната транзакция няма да бъде блокирана от по-бързи
* Детайлите защо работи са мистика

= Ref history

* Всеки `ref` пази няколко свои по-стари версии
* Броят им може да се достъпи с `ref-history-count`
* Броят е ограничен (не се пазят всички)
* `deref` в транзакция може да retry-не, ако версията в началото вече не е достъпна
* Отделно, всеки има `ref-min-history` и `ref-max-history`

= Ref history
== deref, retry

:code
  (def the-ref (ref 0))
  (def tries (atom 0))

  (dorun (pvalues (dosync
                    (Thread/sleep 1000)
                    (swap! tries inc)
                    @the-ref)
                  (dotimes [_ 1000]
                    (Thread/sleep 1)
                    (dosync
                      (alter the-ref inc)))))

= Software Transactional Memory
== Тривиа

* Реализиран е с [Multiversion Concurrency Control](http://en.wikipedia.org/wiki/Multiversion_concurrency_control)
* [gh:tvcutsem/stm-in-clojure] е metacircular имплементация на STM, от която има какво да се научи
* Там има и забавни линкове
* Сайта на Clojure има добро разписване на [refs](http://clojure.org/refs) и [agents](http://clojure.org/agents)

= Записи
== defrecord

* Потребителски тип
* Дефинира се с `(defrecord Point [x y])`
* Създава се с `(Point. 3 4)`
* Съдържа определен брой наименовани полета

= Записи
== Достъпване

:annotate
  (defrecord Point [x y])

  (def pythagorean (Point. 3 4))

  pythagorean      ; =>
  (.x pythagorean) ; =>
  (.y pythagorean) ; =>

= Записи
== Асоциативна абстракция

Записите участват в асоциативната абстракция

:annotate
  (defrecord Point [x y])
  (def pythagorean (Point. 3 4))

  (keys pythagorean)        ; =>
  (vals pythagorean)        ; =>

  (assoc pythagorean :z 10)
  ; =>

  (dissoc pythagorean :x)
  ; =>

= Записи
== Асоциативна абстракция

* Съществуващите полета са достъпни като ключови думи
* Може да добавяте нови ключове в записа
* Ако махнете задължителен ключ от записа, ще получите прост мап

= Записи
== Интересни факти

* Value семантика
* Всеки запис дефинира Java клас
* Всичките му полета са `public final` полета в класа
* Достъпа е много по-бърз от map
* Записите не са функции

= Записи
== Конструктори

Всеки record дава три възможни начина на конструиране:

* `(Point. 1 2)`
* `(->Point 1 2)`
* `(map->Point {:x 1 :y 2})`

= Записи
== Конструктори (2)

`Point.` е най-мощния конструктор - може да приема допълнителни ключове и метаданни.

:annotate
  (defrecord Point [x y])

  (Point. 1 2)
  ; =>
  (Point. 1 2 {:weird true} {:z 3})
  ; =>

= Записи
== Конструктори (3)

`->Point` е функция, която създава запис. Обърнете внимане, че `Point.` не е функция, а Java interop форма.

:code
  (defrecord Point [x y])

  (Point. 1 2)  ; #lectures.sandbox.Point{:x 1, :y 2}
  (->Point 1 2) ; #lectures.sandbox.Point{:x 1, :y 2}

  (apply ->Point [1 2])
  ; #lectures.sandbox.Point{:x 1, :y 2}

  (apply Point. [1 2])
  ; ClassNotFound: Point.

= Записи
== Конструктори (4)

`map->Point` е изключително очевиден:

:annotate
  (defrecord Point [x y])

  (map->Point {:x 3 :y 4})
  ; =>

  (map->Point {:x 3 :y 4 :z 5})
  ; =>

  (map->Point {:y 4 :z 5})
  ; =>

= Записи
== Type hinting

Може да се дава type hinting на записа:

:annotate
  (defrecord Person [^String name ^long age])

  (Person. "Jesus" 33)
  ; =>
  (Person. "Jesus" "old")
  ; =>
  (Person. [135505] 33)
  ; =>

Ползва се за performance, но в случая на примитивен тип дава и type safety.

= Записи
== Общи приказки

* По-натам ще ги гледаме по-детайлно, засега искаме само да ги видите
* Кога се ползват?
* В общия случай се предпочита мап
* Record-и се ползват когато имате нужда от полиморфизъм
* Миграцията от map към record е тривиална
