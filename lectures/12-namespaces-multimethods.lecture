= Въпроси към вас?

* Каква ви дава `defrecord`?
* Какво ви дава `deftype` и каква е разликата му с `defrecord`?
* Обяснете как работят протоколите?

= Да си припомним `defrecord`

* Дефинираме полета предварително
* Отива до Java class (бърз достъп до полетата)
* Участва в асоциативната абстракция
* Инстанциите са със семантика на стойности – можем да ги сравняваме, отпечатват се ОК, могат да са ключове на мап
* Можем да добавяме полета (достъпват се по-бавно)
* Можем да махаме полета (ако са задължителни получаваме мап)
* Конструктори: `->Record`, `map->Record`

= Да си припомним `deftype`

* Дефинираме полета предварително
* Отива до Java class (бърз достъп до полетата)
* Не участва в никакви абстракции
* Дава ни опция за mutable полета (само за експерти!)
* Конструктор: `->TypeName`

= Да си припомним `defprotocol`

* Дефинира протокол, представляващ един клас и N функции
* Различни типове могат да го имплементират с `extend-type`, `extend-protocol` или `extend`
* Със същите пособи могат да се имплементират и интерфейси
* Функциите избират имплементацията посредством типа на първият им аргумент
* Това се нарича dynamic dispatch (single dispatch) в по-класическите езици

= Именовани пространства

* В Clojure, очевидно, има именовани пространства
* Всяко едно име е в някакво именовано пространство
* Например `map` е `clojure.core/map`
* Има текущо именовано пространство, в което имената нямат нужда да се квалифицират
* По подразбиране, в REPL-а то е `user`
* По подразбиране, `user` включва неща от `clojure.core` и `clojure.repl`

= Именовани пространства
== Функции/макроси

Ще разгледаме възможностите на Clojure за работа с именовани пространства

= in-ns

`in-ns` създава ново именовано пространство. В него има единствено имена от `java.lang`. Няма да има стандартни неща като `map` и т.н.

= refer

`refer` добавя имената от едно именовано пространство в текущото. Например:

:annotate
  (in-ns 'lectures.examples.ns1)
  (def answer 42)

  (in-ns 'lectures.examples.ns2)
  (clojure.core/refer 'lectures.examples.ns1)

  answer ; =>

= refer
== :only

`(refer ns :only '())` взема само някои имена от пространство:

:annotate
  (in-ns 'lectures.examples.ns3)
  (def foo 1)
  (def bar 2)
  (def baz 3)

  (in-ns 'lectures.examples.ns4)
  (clojure.core/refer 'lectures.examples.ns3
    :only '(foo bar))

  foo ; =>
  bar ; =>
  ; baz го няма

= refer
== :exclude

`:exclude` е като `:only`, ама наобратно

:annotate
  (in-ns 'lectures.examples.ns5)
  (def foo 1)
  (def bar 2)
  (def baz 3)

  (in-ns 'lectures.examples.ns6)
  (clojure.core/refer 'lectures.examples.ns5
    :exclude '(baz))

  foo ; =>
  bar ; =>
  ; baz го няма

= refer
== :rename

`:rename` ви позволява да преименувате:

:annotate
  (in-ns 'lectures.examples.ns7)
  (def foo 1)
  (def bar 2)
  (def baz 3)

  (in-ns 'lectures.examples.ns8)
  (clojure.core/refer 'lectures.examples.ns7
    :rename '{foo one
              bar two})

  one ; =>
  two ; =>

= require

`require` зарежда конкретен модул, който е зад именовано пространство:

:annotate
  (require 'clojure.set)

  clojure.set/join
  ; =>

= require
== :as

`require` може да дава локално име на именовано пространство

:annotate
  (require '[clojure.set :as s])

  s/join
  ; =>

= require
== съкратени форми

`require` има някои съкратени форми

:annotate
  (require '(clojure [set :as set]
                     [string :as str]))

  set/join
  ; =>

  str/join
  ; =>

= use

`use` е като `require` и `refer`. Например, `(use 'clojure.set)` е еквивалентно на:

:code
  (require 'clojure.set)
  (refer 'clojure.set)

= use
== Допълнителни опции

`use` може да приема опциите на require:

:annotate
  (use '(clojure [string :only (join) :as str]
                 [set :exclude (join)]))

  join
  ; =>

  intersection
  ; =>

  str/trim
  ; =>

= import

`import` се ползва за класове и интерфейси (съответно и за неща, направени с `deftype` и `defrecord`).

:annotate
  (import 'java.util.Date)

  Date ; =>

  (import '(java.util Arrays
                      Collections))

  Arrays      ; =>
  Collections ; =>

= ns

`ns` е форма, която комбинира всички тези неща. Долните два блока са еквивалентни:

:code
  (in-ns 'examples.ns)
  (clojure.core/refer 'clojure.core :exclude '[next replace remove])
  (require '(clojure [string :as string]
                     [set :as set])
           '[clojure.java.shell :as sh])
  (use '(clojure zip xml))
  (import 'java.util.Date
          'java.text.SimpleDateFormat
          '(java.util.concurrent Executors
                                 LinkedBlockingQueue))

  (ns examples.ns
    (:refer-clojure :exclude [next replace remove])
    (:require (clojure [string :as string]
                       [set :as set])
              [clojure.java.shell :as sh])
    (:use (clojure zip xml))
    (:import java.util.Date
             java.text.SimpleDateFormat
             (java.util.concurrent Executors
                                   LinkedBlockingQueue)))

= declare

`declare` позволява forward reference:

:annotate
  (declare answer)

  (defn *-answer [x]
    (* x answer))

  (def answer 42)

  (*-answer 2)

Без него щяхме да имаме грешка при компилация.

= Именовани пространства
== Практики

* По едно именовано пространство на файл
* Файловете имат подчертавка, когато името има тире
* Всеки файл е хубаво да започва с `ns`
* Не трябва да има циклични зависимости
* Всичко това може да се види в [gh:fmi/clojure-lectures]

= Именовани пространства
== Интроспекция

* `(find-ns 'clojure.set)` дава пространството като обект
* `ns-map`, `ns-publics`, `ns-refers`, `ns-imports`
* `resolve` и `ns-resolve` търсят символ в именовано пространство
* `ns-unmap` премахва именовано пространство

= Именовани пространства
== private неща

`defn-` дефинира частна функция, т.е. такава, която не се вкарва по подразбиране с `refer`.

:annotate
  (defn public-fact [n]
    (apply * (range 1 (inc n))))

  (defn- private-fact [n]
    (apply * (range 1 (inc n))))

  (:private (meta #'private-fact)) ; =>
  (:private (meta #'public-fact))  ; =>

* `refer` гледа дали променливите имат `:private` метаданни.
* Няма `def-`, но има `(def ^:private answer 42)`

= defonce

`defonce` е като `def`, ама само ако променливата не съществува

:annotate
  (defonce answer 42)
  (defonce answer 60)

  answer ; =>

= Мултиметоди

* Протоколите ни дават dispatch само по типа на първия аргумент
* Това още се нарича single dispatch
* Ако искаме метода да се избира от типа на няколко аргумента, това се нарича multi dispatch
* В по-тромави ООП езици, това се постига с Visitor Design Pattern
* В Clojure има мултиметоди

= Мултиметоди
== Пример с протоколи

:annotate
  (defprotocol Describeable
    (describe [this who]))

  (extend-protocol Describeable nil
    (describe [this who] (str who " says it's nil")))

  (extend-protocol Describeable String
    (describe [this who] (str who " says it's a string: " this)))

  (extend-protocol Describeable Long
    (describe [this who] (str who " says it's a number: " this)))

  (describe nil "John") ; =>
  (describe 42  "Paul") ; =>
  (describe "A" "Jack") ; =>

= Мултиметоди
== Същото, ама с тях

:annotate
  (defmulti describe
    #(-> %& first type))

  (defmethod describe nil
    [obj who]
    (str who " says it's nil"))

  (defmethod describe String
    [obj who]
    (str who " says it's a string: " obj))

  (defmethod describe Long
    [obj who]
    (str who " says it's a number: " obj))

  (describe nil "John") ; =>
  (describe 42  "Paul") ; =>
  (describe "A" "Jack") ; =>

= Мултиметоди

* Дефинират се с `(defmulti name dispatch-fn)`
* Всеки вариант се дефинира с `(defmethod name dispatch-val [args] ...)`
* `dispatch-fn` се изпълнява върху аргументите и се вика метода с подходящия `dispatch-val`.
* Поддържаното arity е ако arity-то на `dispatch-fn`

= Мултиметоди
== double dispatch

:annotate
  (defmulti poke #(map type %&))

  (defmethod poke [Long Long]
    [_ _]
    "Two longs")
  (defmethod poke [String Long]
    [_ _]
    "A string and a long")
  (defmethod poke [Long String]
    [l s]
    (poke s l))
  (defmethod poke [String String]
    [_ _]
    "Two strings")

  (poke 10 20)       ; =>
  (poke 10 "Baba")   ; =>
  (poke "foo" "bar") ; =>

= Мултиметоди
== default

`:default` задава dispatch по подразбиране.

:annotate
  (defmulti poke
    #(map type %&)
    :default nil)

  (defmethod poke nil
    [_ _]
    "No clue")

  (defmethod poke [Long Long]
    [_ _]
    "Two longs")

  (poke 42 42) ; =>
  (poke [] []) ; =>

= defmulti
== defonce

`defmulti` е реализиран с `defonce`. Това ще рече, ако презаредим следния код, променяйки dispatch функцията, това няма да има ефект:

:annotate
  (defn poke-dispatch
    [first second]
    (type first))

  (defmulti poke
    poke-dispatch)

= defmulti
== defonce (2)

Проблемът може да се реши като ползваме променлива:

:annotate
  (defn poke-dispatch
    [first second]
    (type first))

  (defmulti poke
    #'poke-dispatch)

= type и class

`type` връща що-годе каквото `class`, освен ако няма метаданни `:type`

:annotate
  (class {}) ; =>
  (type {})  ; =>

  (class ^{:type :a-tag} {}) ; =>
  (type ^{:type :a-tag} {})  ; =>

= Мултиметоди
== Йерархии

* Dispatch стойностите не се проверяват с `=`, а с `isa?`.
* `(isa? child parent)` връща дали две неща са родител и дете в йерархията
* В йерархията участват Java класове и ключови думи
* Йерархията може да се разширява с `(derive child parent)`
* `isa?` работи и с вектори

= Йерархии

:annotate
  (isa? Long Object) ; =>
  (isa? Object Long) ; =>

  (isa? [Long String] [Object Object]) ; =>

  (isa? ::some ::other) ; =>

  (derive ::foo ::bar)
  (isa? ::foo ::bar) ; =>

  (derive Object ::interesting)
  (isa? Object ::interesting) ; =>

= Йерархии
== Създаване

Може да създавате собствени йерархии:

:annotate
  (def shapes (-> (make-hierarchy)
                  (derive ::rectangle ::shape)
                  (derive ::ellipse   ::shape)
                  (derive ::square    ::rectangle)
                  (derive ::circle    ::ellipse)))

  (isa? shapes ::circle ::shape)     ; =>
  (isa? shapes ::circle ::rectangle) ; =>
  (isa? shapes ::square ::rectangle) ; =>

= Йерархии
== Интроспекция

* `underive` се сещате какво прави
* `(parents tag)` връща всички преки родители на `tag`
* `(ancestors tag)` връща всички непреки родители на `tag`
* `(descendants tag)` връща всички наследници на `tag`

= Йерархии
== Множествено наследяване

Може да моделирате множествено наследяване с йерархиите:

:annotate
  (def diamond (-> (make-hierarchy)
                   (derive ::left  ::root)
                   (derive ::right ::root)
                   (derive ::child ::left)
                   (derive ::child ::right)))

  (isa? diamond ::child ::root)  ; =>
  (isa? diamond ::child ::left)  ; =>
  (isa? diamond ::child ::right) ; =>

= Мултиметоди
== Множествено наследяване

Имате стандартния проблем:

:annotate
  (def diamond (-> (make-hierarchy)
                   (derive ::left  ::root)
                   (derive ::right ::root)
                   (derive ::child ::left)
                   (derive ::child ::right)))

  (defmulti poke identity :hierarchy #'diamond)
  (defmethod poke ::root [_] "Root")
  (defmethod poke ::left [_] "Left")
  (defmethod poke ::right [_] "Right")

  (poke ::left) ; =>
  (poke ::right) ; =>
  (poke ::child)
  ; =>

= Мултиметоди
== prefer-method

Можете да го решите с prefer-method:

:annotate
  (def diamond (-> (make-hierarchy)
                   (derive ::left  ::root)
                   (derive ::right ::root)
                   (derive ::child ::left)
                   (derive ::child ::right)))

  (defmulti poke identity :hierarchy #'diamond)
  (defmethod poke ::root [_] "Root")
  (defmethod poke ::left [_] "Left")
  (defmethod poke ::right [_] "Right")

  (prefer-method poke ::left ::right)

  (poke ::child) ; =>
